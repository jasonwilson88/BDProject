Keyword: beer.

1) Top brands by social media presence (retweets, tweets, followers, or tweet counts)
Jason
2) Top Hashtagged beers/beer brands
Max
3) Time series beer tweets by sporting events/other large beer consumption activites (Octoberfest)
Jack

import org.apache.hadoop.fs.{FileSystem,Path}
FileSystem.get(sc.hadoopConfiguration).listStatus(new Path("hdfs://")).foreach(x => println(x.getPath))
val df = spark.read.json("hdfs://localhost:9000/tweets.json")
df.createOrReplaceTempView("tweets")
val temp = spark.sql("SELECT date_trunc('day', TO_TIMESTAMP(timestamp_ms/1000)) AS timee, COUNT(*) AS countt FROM tweets GROUP BY date_trunc('day', TO_TIMESTAMP(timestamp_ms/1000)) ORDER BY timee")
temp.show()
temp.coalesce(1).write.json("/tweetCountByDate")



4) Top beers/brands by locality
Jason
5) Top verified twitter users that drink/hashtag/tweet about beer
Max
6) Statistics regarding beer tweets with multimedia
Jack

import org.apache.hadoop.fs.{FileSystem,Path}
FileSystem.get(sc.hadoopConfiguration).listStatus(new Path("hdfs://")).foreach(x => println(x.getPath))
val df = spark.read.json("hdfs://localhost:9000/tweets.json")
df.createOrReplaceTempView("tweets")
val temp = spark.sql("SELECT DISTINCT entities.media.media_url[0] FROM tweets WHERE entities.media.media_url IS NOT null")
temp.show()
temp.coalesce(1).write.json("/mediaUrls")


7) Beer by language (e.g. what are the top beers for tweets by a given language?)
Max
8) User mentions / brand mentions
Jason and Jack

9) Tweets by hour
import org.apache.hadoop.fs.{FileSystem,Path}
FileSystem.get(sc.hadoopConfiguration).listStatus(new Path("hdfs://")).foreach(x => println(x.getPath))
val df = spark.read.json("hdfs://localhost:9000/tweets.json")
df.createOrReplaceTempView("tweets")
val temp = spark.sql("SELECT date_trunc('hour', TO_TIMESTAMP(timestamp_ms/1000)) AS timee, COUNT(*) AS countt FROM tweets GROUP BY date_trunc('hour', TO_TIMESTAMP(timestamp_ms/1000)) ORDER BY timee")
temp.show()
temp.coalesce(1).write.json("/tweetCountByHour")